import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import html2canvas from 'html2canvas';
import type { Match, PdfCardOptions } from '../types';
import React from 'react';
import ReactDOM from 'react-dom/client';
import PrintableCard from '../components/PrintableCard';

interface ListPdfOptions {
    matches: Match[];
    eventDetails: string;
    exchangeDate?: string;
    exchangeTime?: string;
}

const renderComponentToCanvas = async (element: HTMLElement): Promise<HTMLCanvasElement> => {
    // Add a small delay for images to load, especially for cross-origin images
    await new Promise(resolve => setTimeout(resolve, 500));
    return await html2canvas(element, {
        useCORS: true,
        allowTaint: true,
        scale: 2, // Higher scale for better quality
        backgroundColor: null,
    });
};

export const generateIndividualCardsPdf = async (options: PdfCardOptions & { matches: Match[] }): Promise<void> => {
    const { matches, ...cardProps } = options;
    const doc = new jsPDF({
        orientation: 'portrait',
        unit: 'px',
        format: [338, 450] // Proportional to a 3:4 aspect ratio
    });

    // Hide the first page generated by default
    doc.deletePage(1);

    const tempContainer = document.createElement('div');
    tempContainer.style.position = 'absolute';
    tempContainer.style.left = '-9999px';
    tempContainer.style.top = '-9999px';
    tempContainer.style.width = '338px';
    document.body.appendChild(tempContainer);

    const root = ReactDOM.createRoot(tempContainer);

    for (const match of matches) {
        await new Promise<void>(resolve => {
            root.render(
                React.createElement(PrintableCard, {
                    ...cardProps,
                    match,
                    isNameRevealed: true,
                })
            );
            
            setTimeout(async () => {
                const cardElement = tempContainer.firstChild as HTMLElement;
                if (cardElement) {
                    const canvas = await renderComponentToCanvas(cardElement);
                    const imgData = canvas.toDataURL('image/png');
                    doc.addPage();
                    doc.addImage(imgData, 'PNG', 0, 0, 338, 450);
                }
                resolve();
            }, 500); // Allow time for render and image loading
        });
    }

    document.body.removeChild(tempContainer);
    doc.save('Secret_Santa_Cards.pdf');
};


export const generateMasterListPdf = ({ matches, eventDetails, exchangeDate, exchangeTime }: ListPdfOptions): void => {
    const doc = new jsPDF();
    
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(22);
    doc.text('Secret Santa - Master List', doc.internal.pageSize.getWidth() / 2, 20, { align: 'center' });

    if (eventDetails) {
        doc.setFontSize(12);
        doc.setFont('helvetica', 'normal');
        doc.text(`Event Details: ${eventDetails}`, 14, 35);
    }

    if (exchangeDate) {
        let dateInfo = `Exchange Date: ${exchangeDate}`;
        if (exchangeTime) dateInfo += ` at ${exchangeTime}`;
        doc.text(dateInfo, 14, 42);
    }
    
    autoTable(doc, {
        startY: 50,
        head: [['Giver', 'Is the Secret Santa for', 'Receiver']],
        body: matches.map(match => [match.giver.name, '', match.receiver.name]),
        theme: 'striped',
        headStyles: { fillColor: [22, 160, 133] }, // Teal color for header
        styles: { halign: 'center' },
        columnStyles: {
            0: { halign: 'left' },
            2: { halign: 'left' }
        }
    });

    const finalY = (doc as any).lastAutoTable.finalY || doc.internal.pageSize.getHeight() - 20;
    const pageHeight = doc.internal.pageSize.getHeight();
    const pageWidth = doc.internal.pageSize.getWidth();
    let footerY = finalY + 20;

    if (footerY > pageHeight - 10) {
        footerY = pageHeight - 10;
    }

    doc.setFontSize(10);
    doc.setFont('helvetica', 'italic');
    doc.setTextColor(150);
    doc.text('secretsantamatch.com', pageWidth / 2, footerY, { align: 'center' });

    doc.save('Secret_Santa_Master_List.pdf');
};
